<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bakhsh Studios</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/Styles/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark navbar-backgroundclr">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">BlackoutGrill</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavDropdown">
            <ul class="navbar-nav me-auto" id="auth-buttons">
                <!-- Auth buttons will be inserted here -->
            </ul>
        </div>
    </div>
</nav>

<section id="profile" class="d-flex align-items-center justify-content-center" style="min-height: 100vh; background-color: #000;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="d-flex" style="gap: 20px;">
                    <div class="flex-fill profile-info" style="background: #333; padding: 20px; border-radius: 10px; color: #fff;">
                        <h2>User Profile</h2>
                        <p>Name: <span id="userName"></span></p>
                        <p>Email: <span id="userEmail"></span></p>
                        <p>Phone Number: <span id="userPhone"></span></p>
                        <p>Address: <span id="userAddress"></span></p>
                    </div>
                    <div class="flex-fill booking-info" style="background: #333; padding: 20px; border-radius: 10px; color: #fff;">
                        <h2>Order Information</h2>
                        <div id="userBookings">
                            <!-- Booking details will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
  function getCookie(name) {
      let cookieArr = document.cookie.split(";");
      for (let i = 0; i < cookieArr.length; i++) {
          let cookiePair = cookieArr[i].split("=");
          if (name == cookiePair[0].trim()) {
              return decodeURIComponent(cookiePair[1]);
          }
      }
      return null;
  }

  function updateAuthButtons() {
      const token = getCookie('token');
      const userId = getCookie('userId');
      const authButtons = document.getElementById('auth-buttons');

      if (token && userId) {
          authButtons.innerHTML = `
              <li class="nav-item">
                  <img src="/Images/userLogo.png" alt="User Logo" style="width: 30px; height: 30px;">
              </li>
              <li class="nav-item">
                  <a class="nav-link" href="#" id="signout">Sign Out</a>
              </li>
          `;
      } else {
          authButtons.innerHTML = `
              <li class="nav-item"><a class="nav-link" href="/login">Login</a></li>
              <li class="nav-item"><a class="nav-link" href="/register">Sign Up</a></li>
          `;
      }
  }

  document.addEventListener('DOMContentLoaded', function() {
      updateAuthButtons();
      fetchUserProfile();
      getUserOrder();
  });

  function fetchUserProfile() {
      const token = getCookie('token');
      console.log("Token:", token); // Debugging line to print token
      if (token) {
          fetch('/api/v1/user/getUser', {
              method: 'GET',
              headers: {
                  'Authorization': 'Bearer ' + token
              }
          })
          .then(response => {
              if (!response.ok) {
                  throw new Error('Network response was not ok');
              }
              return response.json();
          })
          .then(data => {
              if(data.success && data.user) {
                  document.getElementById('userName').innerText = data.user.userName || 'Not available';
                  document.getElementById('userEmail').innerText = data.user.email || 'Not available';
                  document.getElementById('userPhone').innerText = data.user.phone || 'Not available';
                  document.getElementById('userAddress').innerText = data.user.address.join(', ') || 'Not available';
              } else {
                  console.error('Error: User data not found');
              }
          })
          .catch(error => console.error('Error fetching user profile:', error));
      }
  }

  function getUserOrder() {
      const token = getCookie('token');
      console.log("Token for orders:", token); // Debugging line to print token for orders
      if (token) {
          fetch('/api/v1/food/order/getUserOrders', {
              method: 'GET',
              headers: {
                  'Authorization': 'Bearer ' + token
              }
          })
          .then(response => {
              if (!response.ok) {
                  throw new Error('Network response was not ok');
              }
              return response.json();
          })
          .then(data => {
              let ordersHtml = '';
              data.orders.forEach(order => {
                  ordersHtml += `
                      <div class="booking" id="order-${order._id}">
                          <p><strong>Order ID:</strong> ${order._id}</p>
                          <p><strong>Total Payment:</strong> $${order.payment.toFixed(2)}</p>
                          <p><strong>Status:</strong> ${order.status}</p>
                          <p><strong>Items:</strong></p>
                          <ul>
                              ${order.foods.map(food => `<li>${food.name} - ${food.quantity} x $${food.price.toFixed(2)}</li>`).join('')}
                          </ul>
                      </div>
                  `;
              });
              document.getElementById('userBookings').innerHTML = ordersHtml;
          })
          .catch(error => console.error('Error fetching user orders:', error));
      }
  }

  document.getElementById('signout')?.addEventListener('click', function (event) {
      event.preventDefault();
      fetch('/api/v1/auth/logout', {
          method: 'POST'
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              document.cookie = 'token=; Max-Age=-99999999;';
              document.cookie = 'userId=; Max-Age=-99999999;';
              window.location.href = '/';
          }
      });
  });

  function deleteBooking(bookingID) {
      // Implementation for deleting booking goes here
  }
</script>
</body>
</html>
