<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Orders</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/Styles/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script> 
    <style>
        body {
            background-color: #191919;
            color: #FFF;
        }
        #sidebar {
            background-color: #362000;
        }
        #sidebar .list-unstyled.components li a {
            color: white;
            padding: 12px;
            text-decoration: none; /* Added to remove underline */
        }
        #sidebar .list-unstyled.components li a:hover {
            background-color: #C0A171;
            color: #191919;
        }
        .navbar-backgroundclr {
            background-color: #191919;
        }
        .scrollable-table {
            max-height: 300px;
            overflow-y: auto;
            background-color: #272727;
        }
        .table-dark th,
        .table-dark td {
            color: white;
        }
    </style>
</head>
<body>
    <nav id="sidebar">
        <div class="sidebar-header">
            <h3>BlackoutGrill</h3>
        </div>
        <ul class="list-unstyled components">
            <li class="margin-sidebar"><a href="/dashboard" class="text-white">Dashboard</a></li>
            <li class="margin-sidebar"><a href="/orders" class="text-white">Orders</a></li>
            <li class="margin-sidebar"><a href="/products" class="text-white">Products</a></li>
            <li class="margin-sidebar"><a href="/clients" class="text-white">Clients</a></li>
        </ul>
    </nav>

    <div id="content">
        <nav class="navbar navbar-expand-lg navbar-dark navbar-backgroundclr">
            <div class="container-fluid">
                <a class="navbar-brand dashboard-title-heading" href="#">Dashboard</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNavDropdown">
                    <ul class="navbar-nav me-auto" id="auth-buttons">
                        <!-- Auth buttons will be inserted here -->
                    </ul>
                </div>
            </div>
        </nav>
        
        <div class="container">
            <div class="row">
                <div class="scrollable-table">
                    <table class="table table-dark">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Order ID</th>
                                <th>Item</th>
                                <th>Quantity</th>
                                <th>Amount</th>
                                <th>Ordered By</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="order-details">
                            <!-- Order details will be inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        function getCookie(name) {
            let cookieArr = document.cookie.split(";");
            for (let i = 0; i < cookieArr.length; i++) {
                let cookiePair = cookieArr[i].split("=");
                if (name == cookiePair[0].trim()) {
                    return decodeURIComponent(cookiePair[1]);
                }
            }
            return null;
        }

        function updateAuthButtons() {
            const token = getCookie('token');
            const userId = getCookie('userId');
            const authButtons = document.getElementById('auth-buttons');

            if (token && userId) {
                authButtons.innerHTML = `
                    <li class="nav-item">
                        <a class="nav-link" href="/profile" id="profile-link"><img src="/Images/userLogo.png" alt="User Logo" style="width: 30px; height: 30px;"></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="signout">Sign Out</a>
                    </li>
                `;
            } else {
                authButtons.innerHTML = `
                    <li class="nav-item"><a class="nav-link" href="/login">Login</a></li>
                    <li class="nav-item"><a class="nav-link" href="/register">Sign Up</a></li>
                `;
            }
        }

        async function fetchOrders() {
            try {
                const token = getCookie('token');
                const response = await fetch('http://localhost:4000/api/v1/food/order/getOrders', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const data = await response.json();

                if (data.success) {
                    const orderDetails = document.getElementById('order-details');
                    orderDetails.innerHTML = '';

                    data.orders.forEach(order => {
                        order.foods.forEach(food => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                                <td>${order._id}</td>
                                <td>${food.name}</td>
                                <td>${food.quantity}</td>
                                <td>${food.price}</td>
                                <td>${order.buyer.userName}</td>
                                <td>
                                    <select onchange="updateOrderStatus('${order._id}', this.value)">
                                        <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Pending</option>
                                        <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>Completed</option>
                                        <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
                                    </select>
                                </td>
                            `;
                            orderDetails.appendChild(row);
                        });
                    });
                } else {
                    console.error('Error fetching orders:', data.message);
                }
            } catch (error) {
                console.error('Error fetching orders:', error);
            }
        }

        async function updateOrderStatus(orderId, status) {
            try {
                const token = getCookie('token');
                const response = await fetch(`http://localhost:4000/api/v1/food/orderStatus/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ status })
                });

                const data = await response.json();
                if (!data.success) {
                    console.error('Error updating order status:', data.message);
                } else {
                    console.log('Order status updated successfully');
                }
            } catch (error) {
                console.error('Error updating order status:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            updateAuthButtons();
            fetchOrders();

            document.getElementById('signout')?.addEventListener('click', function (event) {
                event.preventDefault();
                fetch('/api/v1/auth/logout', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.cookie = 'token=; Max-Age=-99999999;';
                        document.cookie = 'userId=; Max-Age=-99999999;';
                        window.location.href = '/';
                    }
                });
            });
        });
    </script>
</body>
</html>
